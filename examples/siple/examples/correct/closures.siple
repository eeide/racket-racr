% This program and the accompanying materials are made available under the
% terms of the MIT license (X11 license) which accompanies this distribution.

% author: C. BÃ¼rger

Procedure main() Begin
	Var i:Integer;
	i := -1;
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SIMPLE CLOSURES
	
	Procedure c0(Var i:Integer):Procedure ():Integer Begin
		Procedure anonym():Integer Begin
			Return i - 3;
		End;
		
		Return anonym;
	End;
	
	Var pc01:Procedure ():Integer;
	pc01 := c0(-100);
	Var pc02:Procedure ():Integer;
	pc02 := c0(100);
	
	Assert pc01 # pc02;
	Assert pc01() = -103;
	Assert pc02() = 97;
	
	pc01 := pc02;
	
	Assert pc01 = pc02;
	Assert pc01() = 97;
	Assert pc02() = 97;
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SIMPLE POINTER CLOSURES
	
	Procedure c1():Pointer(Integer) Begin
		Var i:Integer;
		i := 1;
		Return Address(i);
	End;
	
	Procedure c2():Pointer(Integer) Begin
		Var i:Integer;
		i := 2;
		Return Address(i);
	End;
	
	Procedure c3(Var i:Integer):Pointer(Integer) Begin
		Return Address(i);
	End;
	
	Var p1:Pointer(Integer);
	p1 := c1();
	Var p2:Pointer(Integer);
	p2 := c2();
	Var p3:Pointer(Integer);
	p3 := c3(i);
	Var p4:Pointer(Integer);
	p4 := c3(Deref(c1()));
	Var p5:Pointer(Integer);
	p5 := c3(Deref(c2()));
	Var p6:Pointer(Integer);
	p6 := c1();
	
	Assert p1 # p2 And p1 # p3 And p1 # p4 And p1 # p5 And p1 # p6;
	Assert p2 # p3 And p2 # p4 And p2 # p5 And p2 # p6;
	Assert p3 # p4 And p3 # p5 And p3 # p6;
	Assert p4 # p5 And p4 # p6;
	Assert p5 # p6;
	
	Assert Deref(p1) = 1;
	Assert Deref(p2) = 2;
	Assert Deref(p3) = -1; 
	Assert Deref(p4) = 1;
	Assert Deref(p5) = 2;
	Assert Deref(p6) = 1;
	
	Deref(p1) := -Deref(p1);
	Deref(p2) := -Deref(p2);
	Deref(p3) := -Deref(p3);
	Deref(p4) := -Deref(p4);
	Deref(p5) := -Deref(p5);
	
	Assert p1 # p2 And p1 # p3 And p1 # p4 And p1 # p5 And p1 # p6;
	Assert p2 # p3 And p2 # p4 And p2 # p5 And p2 # p6;
	Assert p3 # p4 And p3 # p5 And p3 # p6;
	Assert p4 # p5 And p4 # p6;
	Assert p5 # p6;
	
	Assert Deref(p1) = -1;
	Assert Deref(p2) = -2;
	Assert Deref(p3) = 1; 
	Assert Deref(p4) = -1;
	Assert Deref(p5) = -2;
	Assert Deref(p6) = 1;
	
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% COMPLEX POINTER CLOSURES
	
	Procedure c4():Procedure ():Pointer(Integer) Begin
		Var i:Integer;
		i := 100;
		
		Procedure anonym():Pointer(Integer) Begin
			Return Address(i);
		End;
		
		Return anonym;
	End;
	
	Var proc:Procedure ():Pointer(Integer);
	proc := c4();
	Var ap1:Pointer(Integer);
	ap1 := proc();
	Var ap2:Pointer(Integer);
	ap2 := proc();
	
	Assert ap1 = ap2;
	Assert Deref(ap1) = 100; Assert Deref(ap2) = 100;
	
	Deref(ap1) := -99;
	Deref(ap2) := 99;
	
	Assert ap1 = ap2;
	Assert Deref(ap1) = 99; Assert Deref(ap2) = 99;
	
	ap2 := Call(c4());
	
	Assert ap1 # ap2;
	Assert Deref(ap1) = 99; Assert Deref(ap2) = 100;
End;
